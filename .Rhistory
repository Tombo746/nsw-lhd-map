}
if (is.null(geom_args[["size"]])) {
geom_args[["size"]] <- 0.4
}
# only use "fill" setting if data is not included
if (is.null(geom_args[["fill"]]) & nrow(data) == 0) {
geom_args[["fill"]] <- "white"
} else if (!is.null(geom_args[["fill"]]) & nrow(data) != 0) {
warning("`fill` setting is ignored when `data` is provided. Use `fill` to color regions with solid color when no data is being displayed.")
}
# create polygon layer
if (nrow(data) == 0) {
map_df <- lhd_map(include = include, exclude = exclude)
geom_args[["mapping"]] <- ggplot2::aes(x = long, y = lat, group = group)
} else {
map_df <- data
geom_args[["mapping"]] <- ggplot2::aes(x = long, y = lat, group = group, fill = "blue")
}
polygon_layer <- do.call(ggplot2::geom_polygon, geom_args)
# construct final plot
ggplot2::ggplot(data = map_df) + polygon_layer + ggplot2::coord_equal() + theme
}
#' This creates a nice map theme for use in plot_usmap.
#' It is borrowed from the ggthemes package located at this repository:
#'   https://github.com/jrnold/ggthemes
#'
#' This function was manually rewritten here to avoid the need for
#'  another package import.
#'
#' All theme functions (i.e. theme_bw, theme, element_blank, %+replace%)
#'  come from ggplot2.
#'
#' @keywords internal
theme_map <- function(base_size = 9, base_family = "") {
element_blank = ggplot2::element_blank()
`%+replace%` <- ggplot2::`%+replace%`
unit <- ggplot2::unit
ggplot2::theme_bw(base_size = base_size, base_family = base_family) %+replace%
ggplot2::theme(axis.line = element_blank,
axis.text = element_blank,
axis.ticks = element_blank,
axis.title = element_blank,
panel.background = element_blank,
panel.border = element_blank,
panel.grid = element_blank,
panel.spacing = unit(0, "lines"),
plot.background = element_blank,
legend.justification = c(0, 0),
legend.position = c(0, 0))
}
plot_lhdmap(data = lhddf)
plot_lhdmap(data = lhddf, include = c("metropolitan"))
plot_lhdmap(data = lhddf, include = c("CC"))
plot_lhdmap <- function(include = c(),
exclude = c(),
data = c(),
values = "values",
theme = theme_map(),
labels = FALSE,
label_color = "black",
...) {
# check for ggplot2
if (!requireNamespace("ggplot2", quietly = TRUE)) {
stop("`ggplot2` must be installed to use `plot_usmap`.
Use: install.packages(\"ggplot2\") and try again.")
}
# parse parameters
#regions_ <- match.arg(regions)
geom_args <- list(...)
# set geom_polygon defaults
if (is.null(geom_args[["colour"]]) & is.null(geom_args[["color"]])) {
geom_args[["color"]] <- "black"
}
if (is.null(geom_args[["size"]])) {
geom_args[["size"]] <- 0.4
}
# only use "fill" setting if data is not included
if (is.null(geom_args[["fill"]]) & nrow(data) == 0) {
geom_args[["fill"]] <- "white"
} else if (!is.null(geom_args[["fill"]]) & nrow(data) != 0) {
warning("`fill` setting is ignored when `data` is provided. Use `fill` to color regions with solid color when no data is being displayed.")
}
# create polygon layer
if (nrow(data) == 0) {
map_df <- lhd_map(include = include, exclude = exclude)
geom_args[["mapping"]] <- ggplot2::aes(x = long, y = lat, group = group)
} else {
map_df <- data
geom_args[["mapping"]] <- ggplot2::aes(x = long, y = lat, group = group)
}
polygon_layer <- do.call(ggplot2::geom_polygon, geom_args)
# construct final plot
ggplot2::ggplot(data = map_df) + polygon_layer + ggplot2::coord_equal() + theme
}
#' This creates a nice map theme for use in plot_usmap.
#' It is borrowed from the ggthemes package located at this repository:
#'   https://github.com/jrnold/ggthemes
#'
#' This function was manually rewritten here to avoid the need for
#'  another package import.
#'
#' All theme functions (i.e. theme_bw, theme, element_blank, %+replace%)
#'  come from ggplot2.
#'
#' @keywords internal
theme_map <- function(base_size = 9, base_family = "") {
element_blank = ggplot2::element_blank()
`%+replace%` <- ggplot2::`%+replace%`
unit <- ggplot2::unit
ggplot2::theme_bw(base_size = base_size, base_family = base_family) %+replace%
ggplot2::theme(axis.line = element_blank,
axis.text = element_blank,
axis.ticks = element_blank,
axis.title = element_blank,
panel.background = element_blank,
panel.border = element_blank,
panel.grid = element_blank,
panel.spacing = unit(0, "lines"),
plot.background = element_blank,
legend.justification = c(0, 0),
legend.position = c(0, 0))
}
plot_lhdmap(data = lhddf, include = c("CC"))
lhd_map()
lhd_map <- function(include = c(),
exclude = c()) {
df <- utils::read.csv("nswlhd.csv",
colClasses = c("numeric", "numeric", "integer", "logical", "integer", "numeric", "character", "character", "character", "charcter"),
stringsAsFactors = FALSE)
if (length(include) > 0) {
df <- df[df$lhd_code %in% include |
df$lhd_short %in% include |
df$lhd_name %in% include |
df$metropolitan %in% include, ]
}
if (length(exclude) > 0) {
df <- df[!(df$lhd_code %in% include |
df$lhd_short %in% include |
df$lhd_name %in% include |
df$metropolitan %in% include), ]
}
df
}
lhd_map()
lhd_map <- function(include = c(),
exclude = c()) {
df <- utils::read.csv("nswlhd.csv",
colClasses = c("numeric", "numeric", "integer", "logical", "integer", "numeric", "character", "character", "character", "character"),
stringsAsFactors = FALSE)
if (length(include) > 0) {
df <- df[df$lhd_code %in% include |
df$lhd_short %in% include |
df$lhd_name %in% include |
df$metropolitan %in% include, ]
}
if (length(exclude) > 0) {
df <- df[!(df$lhd_code %in% include |
df$lhd_short %in% include |
df$lhd_name %in% include |
df$metropolitan %in% include), ]
}
df
}
lhd_map()
lhd_map <- function(include = c(),
exclude = c()) {
df <- utils::read.csv("nswlhd.csv",
colClasses = c("numeric", "numeric", "integer", "logical", "integer", "numeric", "character", "character", "character", "character"),
stringsAsFactors = FALSE,
sep=",")
if (length(include) > 0) {
df <- df[df$lhd_code %in% include |
df$lhd_short %in% include |
df$lhd_name %in% include |
df$metropolitan %in% include, ]
}
if (length(exclude) > 0) {
df <- df[!(df$lhd_code %in% include |
df$lhd_short %in% include |
df$lhd_name %in% include |
df$metropolitan %in% include), ]
}
df
}
lhd_map()
lhd_map <- function(include = c(),
exclude = c()) {
df <- utils::read.csv("nswlhd.csv",
colClasses = c("numeric", "numeric", "integer", "logical", "integer", "numeric", "character", "character", "character", "character"),
stringsAsFactors = FALSE,
fileEncoding="UTF-8-BOM",
sep=",")
if (length(include) > 0) {
df <- df[df$lhd_code %in% include |
df$lhd_short %in% include |
df$lhd_name %in% include |
df$metropolitan %in% include, ]
}
if (length(exclude) > 0) {
df <- df[!(df$lhd_code %in% include |
df$lhd_short %in% include |
df$lhd_name %in% include |
df$metropolitan %in% include), ]
}
df
}
lhd_map()
lhd_map <- function(include = c(),
exclude = c()) {
df <- utils::read.csv("nswlhd.csv",
colClasses = c("numeric", "numeric", "integer", "logical", "integer", "numeric", "integer", "character", "character", "character", "character"),
stringsAsFactors = FALSE,
fileEncoding="UTF-8-BOM",
sep=",")
if (length(include) > 0) {
df <- df[df$lhd_code %in% include |
df$lhd_short %in% include |
df$lhd_name %in% include |
df$metropolitan %in% include, ]
}
if (length(exclude) > 0) {
df <- df[!(df$lhd_code %in% include |
df$lhd_short %in% include |
df$lhd_name %in% include |
df$metropolitan %in% include), ]
}
df
}
lhd_map()
df <- lhd_map
lhd_map <- function(include = c(),
exclude = c()) {
df <- utils::read.csv("nswlhd.csv",
colClasses = c("numeric", "numeric", "integer", "logical", "integer", "numeric", "integer", "character", "character", "character", "character"),
stringsAsFactors = FALSE,
)
if (length(include) > 0) {
df <- df[df$lhd_code %in% include |
df$lhd_short %in% include |
df$lhd_name %in% include |
df$metropolitan %in% include, ]
}
if (length(exclude) > 0) {
df <- df[!(df$lhd_code %in% include |
df$lhd_short %in% include |
df$lhd_name %in% include |
df$metropolitan %in% include), ]
}
df
}
df <- lhd_map
View(df)
head(df)
lhd_map()
df <- data.frame(lhd_map())
View(df)
plot_lhdmap <- function(include = c(),
exclude = c(),
#data = lhd_map(),
values = "values",
theme = theme_map(),
labels = FALSE,
label_color = "black",
...) {
# check for ggplot2
if (!requireNamespace("ggplot2", quietly = TRUE)) {
stop("`ggplot2` must be installed to use `plot_usmap`.
Use: install.packages(\"ggplot2\") and try again.")
}
# parse parameters
#regions_ <- match.arg(regions)
geom_args <- list(...)
# set geom_polygon defaults
if (is.null(geom_args[["colour"]]) & is.null(geom_args[["color"]])) {
geom_args[["color"]] <- "black"
}
if (is.null(geom_args[["size"]])) {
geom_args[["size"]] <- 0.4
}
# create polygon layer
map_df <- lhd_map(include = include, exclude = exclude)
geom_args[["mapping"]] <- ggplot2::aes(x = long, y = lat, group = group)
polygon_layer <- do.call(ggplot2::geom_polygon, geom_args)
# construct final plot
ggplot2::ggplot(data = map_df) + polygon_layer + ggplot2::coord_equal() + theme
}
#' This creates a nice map theme for use in plot_usmap.
#' It is borrowed from the ggthemes package located at this repository:
#'   https://github.com/jrnold/ggthemes
#'
#' This function was manually rewritten here to avoid the need for
#'  another package import.
#'
#' All theme functions (i.e. theme_bw, theme, element_blank, %+replace%)
#'  come from ggplot2.
#'
#' @keywords internal
theme_map <- function(base_size = 9, base_family = "") {
element_blank = ggplot2::element_blank()
`%+replace%` <- ggplot2::`%+replace%`
unit <- ggplot2::unit
ggplot2::theme_bw(base_size = base_size, base_family = base_family) %+replace%
ggplot2::theme(axis.line = element_blank,
axis.text = element_blank,
axis.ticks = element_blank,
axis.title = element_blank,
panel.background = element_blank,
panel.border = element_blank,
panel.grid = element_blank,
panel.spacing = unit(0, "lines"),
plot.background = element_blank,
legend.justification = c(0, 0),
legend.position = c(0, 0))
}
plot_lhdmap()
plot_lhdmap(include = c("CC"))
plot_lhdmap(include = c("HNE"))
plot_lhdmap(include = c("HNE"))
plot_lhdmap(include = c("CC"))
plot_lhdmap(include = c("IS"))
plot_lhdmap()
plot_lhdmap <- function(include = c(),
exclude = c(),
#data = lhd_map(),
values = "values",
theme = theme_map(),
labels = FALSE,
label_color = "black",
...) {
# check for ggplot2
if (!requireNamespace("ggplot2", quietly = TRUE)) {
stop("`ggplot2` must be installed to use `plot_usmap`.
Use: install.packages(\"ggplot2\") and try again.")
}
# parse parameters
#regions_ <- match.arg(regions)
geom_args <- list(...)
# set geom_polygon defaults
if (is.null(geom_args[["colour"]]) & is.null(geom_args[["color"]])) {
geom_args[["color"]] <- "white"
}
if (is.null(geom_args[["size"]])) {
geom_args[["size"]] <- 0.4
}
# create polygon layer
map_df <- lhd_map(include = include, exclude = exclude)
geom_args[["mapping"]] <- ggplot2::aes(x = long, y = lat, group = group)
polygon_layer <- do.call(ggplot2::geom_polygon, geom_args)
# construct final plot
ggplot2::ggplot(data = map_df) + polygon_layer + ggplot2::coord_equal() + theme
}
#' This creates a nice map theme for use in plot_usmap.
#' It is borrowed from the ggthemes package located at this repository:
#'   https://github.com/jrnold/ggthemes
#'
#' This function was manually rewritten here to avoid the need for
#'  another package import.
#'
#' All theme functions (i.e. theme_bw, theme, element_blank, %+replace%)
#'  come from ggplot2.
#'
#' @keywords internal
theme_map <- function(base_size = 9, base_family = "") {
element_blank = ggplot2::element_blank()
`%+replace%` <- ggplot2::`%+replace%`
unit <- ggplot2::unit
ggplot2::theme_bw(base_size = base_size, base_family = base_family) %+replace%
ggplot2::theme(axis.line = element_blank,
axis.text = element_blank,
axis.ticks = element_blank,
axis.title = element_blank,
panel.background = element_blank,
panel.border = element_blank,
panel.grid = element_blank,
panel.spacing = unit(0, "lines"),
plot.background = element_blank,
legend.justification = c(0, 0),
legend.position = c(0, 0))
}
plot_lhdmap()
plot_lhdmap(fill = "white")
plot_lhdmap <- function(include = c(),
exclude = c(),
#data = lhd_map(),
values = "values",
theme = theme_map(),
labels = FALSE,
label_color = "black",
...) {
# check for ggplot2
if (!requireNamespace("ggplot2", quietly = TRUE)) {
stop("`ggplot2` must be installed to use `plot_usmap`.
Use: install.packages(\"ggplot2\") and try again.")
}
# parse parameters
#regions_ <- match.arg(regions)
geom_args <- list(...)
# set geom_polygon defaults
if (is.null(geom_args[["colour"]]) & is.null(geom_args[["color"]])) {
geom_args[["color"]] <- "black"
}
if (is.null(geom_args[["size"]])) {
geom_args[["size"]] <- 0.4
}
# create polygon layer
map_df <- lhd_map(include = include, exclude = exclude)
geom_args[["mapping"]] <- ggplot2::aes(x = long, y = lat, group = group)
polygon_layer <- do.call(ggplot2::geom_polygon, geom_args)
# construct final plot
ggplot2::ggplot(data = map_df) + polygon_layer + ggplot2::coord_equal() + theme
}
#' This creates a nice map theme for use in plot_usmap.
#' It is borrowed from the ggthemes package located at this repository:
#'   https://github.com/jrnold/ggthemes
#'
#' This function was manually rewritten here to avoid the need for
#'  another package import.
#'
#' All theme functions (i.e. theme_bw, theme, element_blank, %+replace%)
#'  come from ggplot2.
#'
#' @keywords internal
theme_map <- function(base_size = 9, base_family = "") {
element_blank = ggplot2::element_blank()
`%+replace%` <- ggplot2::`%+replace%`
unit <- ggplot2::unit
ggplot2::theme_bw(base_size = base_size, base_family = base_family) %+replace%
ggplot2::theme(axis.line = element_blank,
axis.text = element_blank,
axis.ticks = element_blank,
axis.title = element_blank,
panel.background = element_blank,
panel.border = element_blank,
panel.grid = element_blank,
panel.spacing = unit(0, "lines"),
plot.background = element_blank,
legend.justification = c(0, 0),
legend.position = c(0, 0))
}
plot_lhdmap(fill = "white")
plot_lhdmap <- function(include = c(),
exclude = c(),
#data = lhd_map(),
values = "values",
theme = theme_map(),
labels = FALSE,
label_color = "black",
...) {
# check for ggplot2
if (!requireNamespace("ggplot2", quietly = TRUE)) {
stop("`ggplot2` must be installed to use `plot_usmap`.
Use: install.packages(\"ggplot2\") and try again.")
}
# parse parameters
#regions_ <- match.arg(regions)
geom_args <- list(...)
# set geom_polygon defaults
if (is.null(geom_args[["colour"]]) & is.null(geom_args[["color"]])) {
geom_args[["color"]] <- "black"
}
if (is.null(geom_args[["size"]])) {
geom_args[["size"]] <- 0.4
}
if (is.null(geom_args[["fill"]])) {
geom_args[["fill"]] <- "white"
}
# create polygon layer
map_df <- lhd_map(include = include, exclude = exclude)
geom_args[["mapping"]] <- ggplot2::aes(x = long, y = lat, group = group)
polygon_layer <- do.call(ggplot2::geom_polygon, geom_args)
# construct final plot
ggplot2::ggplot(data = map_df) + polygon_layer + ggplot2::coord_equal() + theme
}
#' This creates a nice map theme for use in plot_usmap.
#' It is borrowed from the ggthemes package located at this repository:
#'   https://github.com/jrnold/ggthemes
#'
#' This function was manually rewritten here to avoid the need for
#'  another package import.
#'
#' All theme functions (i.e. theme_bw, theme, element_blank, %+replace%)
#'  come from ggplot2.
#'
#' @keywords internal
theme_map <- function(base_size = 9, base_family = "") {
element_blank = ggplot2::element_blank()
`%+replace%` <- ggplot2::`%+replace%`
unit <- ggplot2::unit
ggplot2::theme_bw(base_size = base_size, base_family = base_family) %+replace%
ggplot2::theme(axis.line = element_blank,
axis.text = element_blank,
axis.ticks = element_blank,
axis.title = element_blank,
panel.background = element_blank,
panel.border = element_blank,
panel.grid = element_blank,
panel.spacing = unit(0, "lines"),
plot.background = element_blank,
legend.justification = c(0, 0),
legend.position = c(0, 0))
}
plot_lhdmap()
plot_lhdmap(include = "Metropolitan")
install_github("Tombo746/nsw-lhd-map")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
library(devtools)
library(tools, lib.loc = "C:/Program Files/R/R-3.6.1/library")
install_github("Tombo746/nsw-lhd-map")
install.packages("devtools")
install.packages("devtools")
